<h2 class="title-header">
    <%= book.title %>
</h2>
<div>
    <% if(book.coverImagePath) { %>
        <img class="book-image" src="<%= book.coverImagePath %>">
        <% } else { %>
            <img  class="book-image" src="/book.png">
            <% } %>
</div>
<div class="dashboard-details">
    <div>Author : <%=book.author.name %>
    </div>
    <div>Publisher/Platform : <%=book.publisher.name %>
    </div>
    <div>Publish Date : <%=book.publishDate.toDateString() %>
    </div>
    <div>Book Type :
        <% if(book.type==="book" ) { %>
            Book
            <br/>
            <div>Copies : <%=book.copies %>
        <% } else { %>
            E-Book/Web
            <%if(book.driveLink) {%>
                <div>
                    <a href="<%=book.driveLink%>" style="color: inherit;" target="_blank">Drive/Web Link</a>
                </div>
             <% } %> 
        <%}%>
    </div>
    <div>
        <label>Show Description</label>
        <label class="switch">
        <input type="checkbox" id="showDescToggle" name="showDescToggle" onchange="showDesc()">
        <span class="slider round"></span>
        </label>
        <div style="display: none;" id="showDescDiv" class="description">
            <div id="description">
                <%- book.sanitizedDescription %>
            </div>
            <br/>
        </div>
    </div>
    <div>Page Count : <%=book.pageCount %>
    <br/>
    <div>Progress :
        <% if(book.progress==="inProgress" ) { %>
            In Progress
            <div>Pages Completed : <%=book.pagesCompleted %>
            <br/>
            <div>Percentage Completed : <%= Math.round(book.percentageCompleted * 100 * 100) / 100 %>%
            </div>
            <% } else if(book.progress==="completed" ) { %>
                Completed
                <% } else { %>
                    Yet to Start
                    <%}%>
    </div>
    <div>
        <label>Show Version History</label>
        <label class="switch">
        <input type="checkbox" id="showBookVersionHistoryToggle" name="showBookVersionHistoryToggle" onchange="showBookVersionHistory()">
        <span class="slider round"></span>
        </label>
        <div style="display: none;" id="showBookVersionHistoryDiv" class="description">
            <div>Last Modified At : <%=book.lastModifiedAt.toDateString() %>
            </div>
            <div>Last Opened At : <%=book.lastOpenedAt.toDateString() %>
            </div>
            <div>Created At : <%=book.createdAt.toDateString() %>
            </div>
            <div>Modification Times : <%=book.version %>
            </div>
        </div>
    </div>
    <br/>
    </div>
<div class="btn-group">
        <% if(book.isFavourite){ %>
        <button id="showPopupButton" onclick="addOrRemoveFavourite('<%= book.id %>')" class="btn btn-primary" >
            <i id="favouriteButton" class="fas fa-heart" style="color: red;"></i> Favourite
        </button>
        <% } else { %>
        <button id="showPopupButton" onclick="addOrRemoveFavourite('<%= book.id %>')" class="btn btn-primary">
            <i id="favouriteButton" class="fas fa-heart"></i> Favourite
        </button> 
        <% } %> 
        <div id="popup" class="popup">
            <p id="loadingMessage">Updating Favourites<span id="dots"></span></p>
        </div> 
        <% if(book.isDailyBook){ %>
            <button id="showPopupButtonDailyBook" onclick="addOrRemoveDailyReadBook('<%= book.id %>')" class="btn btn-primary" >
                <i id="dailyReadButton" class="fas fa-book" style="color: orange;"></i> Daily Read
            </button>
        <% } else { %>
            <button id="showPopupButtonDailyBook" onclick="addOrRemoveDailyReadBook('<%= book.id %>')" class="btn btn-primary">
                <i id="dailyReadButton" class="fas fa-book"></i> Daily Read
            </button>
        <% } %> 
        <div id="popupDailyBook" class="popup">
          <p id="loadingMessageDailyBook">Updating Daily Read<span id="dotsDailyBook"></span></p>
        </div> 
    <a class="btn btn-primary" href="/files/books/<%= book.id%>/notes">Notes</a>
    <a class="btn btn-primary" href="/files/books/<%= book.id%>/edit">Edit</a>
    <a class="btn btn-primary" href="/files/authors/<%= book.author.id%>/">View Author</a>
    <a class="btn btn-primary" href="/files/publishers/<%= book.publisher.id%>/">View Publisher</a>
    <br>
    <button id="showDeletePopup" class="btn btn-danger" onclick="deleteBook('<%= book.id %>')">Delete Book</button>
    <div id="popupDeletingBook" class="popup">
      <p id="loadingMessageDeletingBook">Deleting Book<span id="dotsDeletingBook"></span></p>
  </div> 
</div>

<script>
    function showBookVersionHistory(){
    var showBookVersionHistoryToggle = document.getElementById("showBookVersionHistoryToggle");
    var showBookVersionHistoryDiv = document.getElementById("showBookVersionHistoryDiv");
    if (showBookVersionHistoryToggle.checked)
      showBookVersionHistoryDiv.style.display = "block";
    else
      showBookVersionHistoryDiv.style.display = "none";
    }
    function showDesc(){
    var showDescToggle = document.getElementById("showDescToggle");
    var showDescDiv = document.getElementById("showDescDiv");
    if (showDescToggle.checked)
      showDescDiv.style.display = "block";
    else
      showDescDiv.style.display = "none";
    }



  async function addOrRemoveFavourite(bookId) {
    try {
      var popup = document.getElementById("popup");
      const loadingMessage = document.getElementById("loadingMessage");
      const dotsElement = document.getElementById("dots");

      loadingMessage.style.display = "inline"; // Show the loading message
      popup.style.display = "block"; // Show the popup

      let dotsCount = 0;
      const interval = setInterval(() => {
      dotsElement.textContent = ".".repeat(dotsCount);
      dotsCount = (dotsCount + 1) % 4; // Loop dotsCount from 0 to 3
      }, 200); // Change dots every 0.5 seconds (200 milliseconds)
      const response = await fetch(`/files/books/${bookId}/addOrRemoveFav`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      setTimeout(() => {
          clearInterval(interval);
          dotsElement.textContent = ""; // Clear dots
          loadingMessage.style.display = "none"; // Hide the loading message
          popup.style.display = "none"; // Hide the popup
          console.log("res");
        } , 1000);
      if (response.ok) {
        // Success: update the page content dynamically
        const data = await response.json();
        const updatedBook = data.book;
        // Update the elements on the page with the updated book data
        // For example, you might update the class of a button or an icon to reflect the change
        // For this example, let's assume you have a button with the ID 'dailyReadButton'
        const favouriteButton = document.getElementById('favouriteButton');
        if (updatedBook.isFavourite) {
          favouriteButton.style.color = 'red';
        } else {
          favouriteButton.style.color = ''; // To remove the inline style and use the default style
        }
      } else {
        // Error handling if needed
        console.error('Error updating favouriteBook status');
        const errorData = await response.json();
        console.error('Error message:', errorData.errorMessage);
      }
    } catch (error) {
      console.error('Error adding or removing favouriteBook:', error);
    }
  }


  async function deleteBook(bookId) {
    try {
      // Ask for user confirmation

      const confirmed = confirm("Are you sure you want to delete this book?");
      if (!confirmed) {
        // If the user cancels, return early and don't send the delete request
        return;
      }
      var popup = document.getElementById("popupDeletingBook");
      const loadingMessage = document.getElementById("loadingMessageDeletingBook");
      const dotsElement = document.getElementById("dotsDeletingBook");

      loadingMessage.style.display = "inline"; // Show the loading message
      popup.style.display = "block"; // Show the popup

      let dotsCount = 0;
      const interval = setInterval(() => {
      dotsElement.textContent = ".".repeat(dotsCount);
      dotsCount = (dotsCount + 1) % 4; // Loop dotsCount from 0 to 3
      }, 200); // Change dots every 0.5 seconds (200 milliseconds)

      const response = await fetch(`/files/books/${bookId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      setTimeout(() => {
          clearInterval(interval);
          dotsElement.textContent = ""; // Clear dots
          loadingMessage.style.display = "none"; // Hide the loading message
          popup.style.display = "none"; // Hide the popup
          console.log("res");
        } , 1000);
      if (response.ok) {
        // Success: update the page content dynamically
        const data = await response.json();
        // For example, you might show an alert to inform the user about the successful deletion
        // alert(data.successMessage);
        // Delay the redirection by 3 seconds
        setTimeout(() => {
            window.location.href = '/files/books';
        }, 1000);
      } else {
        // Error handling if needed
        console.error('Error deleting book');
        const errorData = await response.json();
        console.error('Error message:', errorData.errorMessage);
        alert('Error message: ' + errorData.errorMessage);
      }
    } catch (error) {
      console.error('Error deleting book:', error);
    }
  }

  async function addOrRemoveDailyReadBook(bookId) {
    try {
    var popup = document.getElementById("popupDailyBook");
    const loadingMessage = document.getElementById("loadingMessageDailyBook");
    const dotsElement = document.getElementById("dotsDailyBook");

    loadingMessage.style.display = "inline"; // Show the loading message
    popup.style.display = "block"; // Show the popup

    let dotsCount = 0;
    const interval = setInterval(() => {
      dotsElement.textContent = ".".repeat(dotsCount);
      dotsCount = (dotsCount + 1) % 4; // Loop dotsCount from 0 to 3
    }, 200); // Change dots every 0.5 seconds (200 milliseconds)
      const response = await fetch(`/files/books/${bookId}/addOrRemoveDailyReadBook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      setTimeout(() => {
      clearInterval(interval);
      dotsElement.textContent = ""; // Clear dots
      loadingMessage.style.display = "none"; // Hide the loading message
      popup.style.display = "none"; // Hide the popup
    }, 1000); // Simulate loading for 5 seconds (5000 milliseconds)
      if (response.ok) {
        // Success: update the page content dynamically
        const data = await response.json();
        const updatedBook = data.book;
        // Update the elements on the page with the updated book data
        // For example, you might update the class of a button or an icon to reflect the change
        // For this example, let's assume you have a button with the ID 'dailyReadButton'
        const dailyReadButton = document.getElementById('dailyReadButton');
        if (updatedBook.isDailyBook) {
          dailyReadButton.style.color = 'orange';
        } else {
          dailyReadButton.style.color = ''; // To remove the inline style and use the default style
        }
      } else {
        // Error handling if needed
        console.error('Error updating dailyReadBook status');
        const errorData = await response.json();
        console.error('Error message:', errorData.errorMessage);
      }
    } catch (error) {
      console.error('Error adding or removing dailyReadBook:', error);
    }
  }
  
</script>