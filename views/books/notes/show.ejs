
<div class="container">
  <h1 class="title-header"><%=title %></h1>
  <h2 class="title-header">Notes by <%= ownerName  %></h2>
  <div class="btn-group">
  <a href="/files/books/<%= bookId%>/notes" class="btn btn-primary">All chapters</a>
  <a href="edit/" class="btn btn-primary">Edit</a>
  <button class="btn btn-primary" onclick="generatePDF()" id="downloadButton" >Get Notes PDF</button>
  </div>
  <h1 class="mb-1">Chapter Number: <%= chapter.chapterNumber %></h1>
  <h1 class="mb-1">Title: <%= chapter.title %></h1>
  <h3 class="mb-1">Description: </h3>
  <div class="description">
    <%- chapter.description %>
  </div>
  <br/>
  <h3 class="mb-1">Notes: </h3>
  <div class="description">
    <button onclick="copyText()">Copy Text</button>
    <br/>
    <br/>
    <label for="speed">Speed</label>
    <input type="number" name="speed" id="speed" min=".25" max="3" step=".25" value="1">
    <button id="stop" onclick="stop();">Reset</button>
    <button id="play" onclick="play();">Play</button>
    <button id="pause" onclick="pause();"></button>
    <div id="notes">
      <%- chapter.sanitizedNotesMarkdown %>
    </div>
    <hr/>
  </div>
</div>

<script>
function copyText() {
  // Get the content of the div
  var description = document.getElementById("notes").innerText;

  // Create a temporary textarea element
  var textarea = document.createElement("textarea");
  textarea.value = description;

  // Append the textarea to the document
  document.body.appendChild(textarea);

  // Select the text in the textarea
  textarea.select();
  textarea.setSelectionRange(0, 99999); // For mobile devices

  // Copy the text to the clipboard
  document.execCommand("copy");

  // Remove the temporary textarea
  document.body.removeChild(textarea);

  // Alert the user
  alert("Text copied to clipboard: " + description);
}
//Speech/////////////////////////////////////////////////////////////////////////////////////

var notesInnerHTML = document.getElementById("notes").innerText;
var pauseButton = document.getElementById("pause");
var playButton = document.getElementById("play");
var stopButton = document.getElementById("stop");
var speedButton = document.getElementById("speed");
//disbling buttons until play starts
stopButton.disabled = true;
pauseButton.disabled = true;
pauseButton.textContent = "Pause";
// Create a temporary textarea element
var textInput = document.createElement("textarea");
textInput.value = notesInnerHTML;

// Append the textInput to the document
document.body.appendChild(textInput);
let voiceCheck = window.speechSynthesis;
// console.log(voiceCheck);
if(voiceCheck){
const synth = window.speechSynthesis;
    let myPauseProperty = false;
    let utterThis;
    function stop() {
        pauseButton.disabled = true;
        pauseButton.textContent = "Pause";
        myPauseProperty = false;
        synth.cancel(utterThis);
        playButton.disabled = false;
    }
    function play() {
      // console.log("Start play");
      //enabling buttons until play starts
      stopButton.disabled = false;
      pauseButton.disabled = false;
      playButton.disabled = true;
      const speedInput = document.getElementById('speed').value;
        if ((myPauseProperty === true)&&(synth.speaking===true)) {//alredy started not ended
            //speech somewhere in the middle, and paused, needs resumed
            synth.resume();
            //added below line to reslove bug in android chrome
            synth.speak(utterThis);
            myPauseProperty=false;
        }
        else if (synth.speaking===false) {
            //not started or has ended, user expects to start play
            utterThis = new SpeechSynthesisUtterance(textInput.value);
            utterThis.rate = parseFloat(speedInput);
            synth.cancel();
            //adjust the speed
            synth.speak(utterThis);
            //adding to resolve pausing for long texts more than 14sec
            let r = setInterval(() => {
            // console.log(synth.speaking);
            if (!synth.speaking) {
              clearInterval(r);
            } else if(!myPauseProperty){
              synth.pause();
              synth.resume();
              //added below line to reslove bug in android chrome
              synth.speak(utterThis);
            }
            }, 14000);
            myPauseProperty=false;
        }
    }
    function pause() {
        if ((myPauseProperty === true)&&(synth.speaking===true)) {
            //speech somewhere in middle of phrase and paused, user wants unpause
            synth.resume();
            //added below line to reslove bug in android chrome
            synth.speak(utterThis);
            pauseButton.textContent = "Pause";
            myPauseProperty = false;
        }
        else if ((myPauseProperty === false)&&(synth.speaking===true)) {
            //speech somewhere in middle of phrase and unpaused, user wants pause
            synth.pause();
            myPauseProperty=true;
            pauseButton.textContent = "Resume";
        }
    }
// Remove the temporary textInput
document.body.removeChild(textInput);
  }
  else{
    console.log("Browser doesn't support speechSynthesis");
  }
</script>

<script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
<script>
  function addPageBreaks(notes, maxCharacters , addCharecters) {
  const words = notes.split(' ');
  let result = '';
  let currentLine = '';

  for (let i = 0; i < words.length; i++) {
    const word = words[i];
    const isHtmlTag = word.startsWith('<') && word.endsWith('>');
    const lineWithWord = currentLine.length > 0 ? currentLine + ' ' + word : word;

    if ((currentLine + ' ' + word).length <= maxCharacters && !isHtmlTag) {
      currentLine = lineWithWord;
    } else {
      if (currentLine.length > 0) {
        result += currentLine + ' ';
      }

      if (isHtmlTag) {
        result += '<br/><hr/><div style="page-break-before: always;"></div><br/><br/><hr/><br/><br/>';
      } else {
        result += '<br/><hr/><div style="page-break-before: always;"></div><br/><br/><hr/><br/><br/> ' + word;
      }

      currentLine = '';
    }
    //for remaining pages except 1st page of notes
    if(i === 0) maxCharacters += addCharecters;
  }

  if (currentLine.length > 0) {
    result += currentLine;
  }
  // console.log(result);
  return result;
}

  // Define an array to store chapter content
  function generatePDF() {
    const chapterContent = [];
    let chapterDetails
        chapterDetails = {
          chapterNumber: "<%= chapter.chapterNumber %>",
          title: "<%= chapter.title %>",
          description: `<%- chapter.description %>`,
          sanitizedNotesMarkdown: `<%- chapter.sanitizedNotesMarkdown %>`
        };
        chapterContent.push(chapterDetails);
      
      // Define the document definition for PDF
      // console.log(chapterContent); 
      let chapterWiseNotes = [
          "<div style='padding:50px; background-color: var(--color-background-dark)'>",
          "<hr/><hr/>",
          "<div style=''>",
            "<h1 class='title-header'><%= title %></h1>",
            "<h2 class='title-header'>Notes By <%= ownerName %></h2>",
            "<p>Notes Created by using DigiLibrary, try at </p>",
            "<p> www.digilibrary.onrender.com </p>",
            "<hr/><hr/>",
          "</div>",
        ]
        for (let i = 0; i < chapterContent.length; i++) {
        chapterWiseNotes.push(`<div style="page-break-before: always;"></div>`);
        chapterWiseNotes.push(`<hr/><hr/>`);
        chapterWiseNotes.push('<div class="card-body" style="margin: 0 auto;">');
        chapterWiseNotes.push(`<h3 style='font-weight: normal;' class="card-title">Chapter Number: ${chapterContent[i].chapterNumber}</h3>`);
        chapterWiseNotes.push(`<h4 style='font-weight: normal;' class="card-title">Title:</h4>`);
        chapterWiseNotes.push(`<h4 style='font-weight: normal;' class="description">${chapterContent[i].title}</h4>`);
        chapterWiseNotes.push(`<h4 style='font-weight: normal;' class="card-title">Description:</h4>`);
        chapterWiseNotes.push(`<div style='background-color: var(--color-background-text);
                                            font-weight: normal;
                                            margin: 2px;
                                            border: var(--color-text-dark);
                                            padding: 10px;
                                            border-radius: 10px;
                                            border-style: double;
                                            font-size: 0.75rem;'>${addPageBreaks(chapterContent[i].description , 2000 , 1100)}</div>`);
        chapterWiseNotes.push(`</div><div style="page-break-after: always;"></div>`);
        chapterWiseNotes.push('<div class="card-body">');
        chapterWiseNotes.push(`<h2 style='font-weight: normal;' class="card-title">Notes:</h2>`);
        chapterWiseNotes.push(`<div style='background-color: var(--color-background-text);
                                            font-weight: normal;
                                            margin: 2px;
                                            border: var(--color-text-dark);
                                            padding: 10px;
                                            border-radius: 10px;
                                            border-style: double;
                                            font-size: 0.75rem;'>${addPageBreaks(chapterContent[i].sanitizedNotesMarkdown , 2700 , 620)}</div>`);
        chapterWiseNotes.push(`</div>`);
      }
      chapterWiseNotes.push(`<div style="page-break-after: always;"></div>`);
      const title = "<%= title %>";
      const theme = document.cookie.replace(/(?:(?:^|.*;\s*)theme\s*\=\s*([^;]*).*$)|^.*$/, "$1");
      const chapterNum = "<%= chapter.chapterNumber %>";
      const content = chapterWiseNotes.join("") + "</div>";
      
      const options = {
        filename: `${title}_notes.pdf`,
        pagesplit: true,
        html2canvas: {
          scale: 2.25, // Adjust the scale for better quality
        },
        jsPDF: {
          format: "a4",
          orientation: "portrait"
        },
      };
      var downloadButton = document.getElementById('downloadButton');
      downloadButton.disabled = true;
      downloadButton.textContent = 'Preparing download...'
      // html2pdf().set(options).from(content).save();
      // Generate and save the PDF
      html2pdf()
        .set(options)
        .from(content)
        .toPdf()
        .get('pdf')
        .then(pdf => {
          // Get the total number of pages in the PDF
          const totalPages = pdf.internal.getNumberOfPages();

          // Remove the last page
          pdf.deletePage(totalPages);

          // Save the modified PDF
          pdf.save(`${title}_chapter_number_${chapterNum}_diginotes_(${theme}).pdf`);

          // console.log(`${title}_diginotes_(${theme}).pdf`);

          //enable and reset button text
          downloadButton.disabled = false;
          downloadButton.textContent = 'Get Notes PDF'
          alert("Check the Downloaded PDF, Not satisfied? please redownload, cache will improve the scales, still not satisfied please adjust overflows in the notes by editing and redownload");
        });

    };

</script>